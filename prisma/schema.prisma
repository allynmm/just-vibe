generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  username       String
  googleId       String          @unique
  location       String
  bio            String          @db.VarChar(300)
  image          String          @db.VarChar(300)
  followedBy     Follows[]       @relation("followedBy")
  following      Follows[]       @relation("following")
  favorite       Favorite[]
  reviews        Review[]
  userEvents     UserEvent[]
  albumsOfTheDay AlbumOfTheDay[]
  TopAlbums      TopAlbums[]
  TopArtists     TopArtists[]
  Post           Post[]
}

model Review {
  id      Int    @id @default(autoincrement())
  text    String
  rating  Int
  userId  Int
  albumId Int
  user    User   @relation(fields: [userId], references: [id])
  Album   Album  @relation(fields: [albumId], references: [id])

  @@index([albumId], map: "Review_albumId_fkey")
  @@index([userId], map: "Review_userId_fkey")
}

model Event {
  id         Int         @id @default(autoincrement())
  venue      String
  location   String
  userEvents UserEvent[]
}

model Album {
  id             Int             @id @default(autoincrement())
  albumName      String
  artistName     String
  image          String          @db.VarChar(300)
  reviews        Review[]
  albumsOfTheDay AlbumOfTheDay[]
  TopAlbums      TopAlbums[]
}

model Artist {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(300)
  description String
  TopArtists  TopArtists[]
}

model UserEvent {
  userId  Int
  eventId Int
  event   Event @relation(fields: [eventId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@id([userId, eventId])
  @@index([eventId], map: "UserEvent_eventId_fkey")
}

model Favorite {
  id       Int    @id @default(autoincrement())
  userId   Int
  entity   Entity
  entityId Int
  user     User   @relation(fields: [userId], references: [id])

  @@index([userId], map: "Favorite_userId_fkey")
}

model AlbumOfTheDay {
  id      Int      @id @default(autoincrement())
  date    DateTime @default(now())
  albumId Int
  album   Album    @relation(fields: [albumId], references: [id])
  userId  Int
  user    User     @relation(fields: [userId], references: [id])

  @@index([albumId], map: "AlbumOfTheDay_albumId_fkey")
  @@index([userId], map: "AlbumOfTheDay_userId_fkey")
}

model TopAlbums {
  position Int
  album    Album @relation(fields: [albumId], references: [id])
  user     User  @relation(fields: [userId], references: [id])
  albumId  Int
  userId   Int

  @@unique([position, albumId, userId])
}

model TopArtists {
  position Int
  user     User   @relation(fields: [userId], references: [id])
  artist   Artist @relation(fields: [artistId], references: [id])
  userId   Int
  artistId Int

  @@unique([position, artistId, userId])
}

model Follows {
  followedBy   User @relation("followedBy", fields: [followedById], references: [id])
  followedById Int
  following    User @relation("following", fields: [followingId], references: [id])
  followingId  Int

  @@id([followingId, followedById])
}

model Post {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  date      DateTime  @default(now())
  postType  String
  musicPost MusicPost
}

enum Entity {
  ALBUM
  ARTIST
  SONG
}

enum MusicPost {
  REVIEW
  ALBUMOFTHEDAY
}
